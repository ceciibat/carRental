//// EXERCÍCIO PROPOSTO SOBRE CONJUNTOS  

////criação do conjunto A
//HashSet<int> A = new HashSet<int>();

//Console.Write("How many students for course A? ");
//int n = int.Parse(Console.ReadLine());

//for (int i = 1; i <= n; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    A.Add(idStudents);
//}

////criação do conjunto B
//HashSet<int> B = new HashSet<int>();

//Console.Write("How many students for course B? ");
//int n1 = int.Parse(Console.ReadLine());

//for (int i = 1; i <= n1; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    B.Add(idStudents);
//}

////criação do conjunto C
//HashSet<int> C = new HashSet<int>();

//Console.Write("How many students for course C? ");
//int n2 = int.Parse(Console.ReadLine());

//for (int i = 1; i <= n2; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    C.Add(idStudents);
//}

//A.UnionWith(B);
//A.UnionWith(C);

//Console.WriteLine("Total students: " + A.Count);
//// Considerações: fiz alone, mas tive q consultar macoratti pra lembrar sobre juntar mais de 2 conjuntos, 
//// e vi que é easy demaise, ele tipo "acumula" no conjunto que vc coloca primeiro. Exemplo dos A B C acima. :) 
//// (obs: neste dia (11/08/2023) passei a tarde quase toda estudando sobre GetHashCode e Equals). obrigada

//// OUTRA MANEIRA DE FAZER
//// aqui tem a classe para os registros e se cria apenas 1 conjunto

////PROGRAM MAIN
//HashSet<Registration> registrations = new HashSet<Registration>();

//Console.Write("How many students for course A? ");
//int students = int.Parse(Console.ReadLine());

//for (int i = 0; i < students; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    registrations.Add(new Registration(idStudents));
//}

//Console.Write("How many students for course B? ");
//students = int.Parse(Console.ReadLine());

//for (int i = 0; i < students; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    registrations.Add(new Registration(idStudents));
//}

//Console.Write("How many students for course C? ");
//students = int.Parse(Console.ReadLine());

//for (int i = 0; i < students; i++)
//{
//    int idStudents = int.Parse(Console.ReadLine());
//    registrations.Add(new Registration(idStudents));
//}

//Console.Write($"\nTotal students: {registrations.Count}");

////CLASSE REGISTRATION

//public int Id { get; set; }

//public Registration(int id)
//{
//    Id = id;
//}

//public override int GetHashCode()
//{
//    return Id.GetHashCode();
//}

//public override bool Equals(object? obj)
//{
//    if (!(obj is Registration))
//    { return false; }
//    Registration other = (Registration)obj;
//    return Id.Equals(other.Id);
//}
// aqui eu tbm faço gethashcode do Registration e preparo o equals pra comparar
    
//// EXERCICIO PROPOSTO SOBRE DICTIONARY ------------- DICTIONARY 16/08/2023

//Console.Write("Enter file full path: ");
//string path = Console.ReadLine();

//try
//{
//    using (StreamReader sr = File.OpenText(path))
//    {
//        Dictionary<string, int> dictionary = new Dictionary<string, int>();

//        while (!sr.EndOfStream)
//        {
//            string[] line = sr.ReadLine().Split(',');
//            string candidate = line[0];
//            int votes = int.Parse(line[1]);
         // os dados em variáveis

//            if (dictionary.ContainsKey(candidate))
//            {
//                dictionary[candidate] += votes;
//            }
//            else
//            {
//                dictionary[candidate] = votes;
//            }
//        }
//        Console.WriteLine("Quantidade de candidatos: " + dictionary.Count);

//        foreach (var person in dictionary)
//        {
//            Console.WriteLine($"{person.Key}: {person.Value}");
//        }
//    }
//}
//catch (IOException e)
//{
//    Console.WriteLine("An error occured!");
//    Console.WriteLine(e.Message);
//}
