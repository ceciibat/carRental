// Aqui começa a Seção 17, sobre Expressões Lambda, Delegate e LINQ

//// Uma experiência com Comparison

//string fruta1 = "laranja";
//string fruta2 = "banana";
//string fruta3 = "abacate";

//List<string> list = new List<string>
//        {
//            fruta1,
//            fruta2,
//            fruta3
//        };

//// 1 maneira  - eixpressão lambda
//// Comparison<string> compr = (frutaX, frutaY) => frutaX.ToUpper().CompareTo(frutaY.ToUpper());
//// list.Sort(compr);

//// outra maneira 
//list.Sort((frutaX, frutaY) => frutaX.ToUpper().CompareTo(frutaY.ToUpper()));

//foreach (string s in list)
//{
//    Console.WriteLine(s);
//}

//// INTRODUÇÃO A DELEGATES    18/08/2023

//// PROGRAM MAIN
//delegate double BinaryNumericOperation(double n1, double n2);   // declaração do delegate
//class Program
//{
//    static void Main(string[] args)
//    {
//        double a = 50;
//        double b = 12;

//        // BinaryNumericOperation op = new BinaryNumericOperation(CalculationService.Sum);  <= sintaxe alternativa
//        BinaryNumericOperation op = CalculationService.Sum;
//        // o objeto delegate op é uma referencia para a função sum

//        // double result = op.Invoke(a, b);   <= sintaxe alternativa
//        double result = op(a, b);
//        Console.WriteLine(result);
//    }
//}

//// CLASSE CALCULATIONSERVICE

class CalculationService
    {
        public static void ShowMax(double x, double y)
        {
            double max = (x > y) ? x : y;
            Console.WriteLine(max);
        }
        public static void ShowSum(double x, double y)
        {
            double sum = x + y;
            Console.WriteLine(sum);
        }
    }
//// Multicast Delegate

BinaryNumericOperation op = CalculationService.ShowSum;
op += CalculationService.ShowMax;
// agora o meu delegate guarda referencia para 2 funções
op(a, b);

// NOTA:
// Os códigos das aulas sobre os delegates Predicate, Action e Fun, não os salvei aqui (até pq eram muitas variações de escrita/codagem)
// porém, salvei trechos na própria Udemy, junto com as anotações sobre eles. :) [18 a 22 de Agosto de 2023]

// ------------------ INTRODUÇÃO AO LINQ ------------------- 22/08/2023

// Specify the data source

        int[] numbers = new int[] { 2, 3, 4, 5 };

        // Define the query expression

        IEnumerable<int> result = numbers
            .Where(x => x % 2 == 0)
            .Select(x => x * 10);

        // Execute the query

        foreach (int x in result) 
        {
            Console.WriteLine(x);
        }

        // função Where serve para filtrar a fonte de dados, vai ser gerada uma nova coleção contendo somente
        // aqueles dados que atenderem o predicado (predicate) que eu informar como argumento dessa função

// ------------- DEMO - LINQ COM LAMBDA - PARTE 1 -------------- 23/08/2023

//CLASS PROGRAM MAIN

static void Print<T>(string message, IEnumerable<T> collection)
    {   Console.WriteLine(message);
        foreach(T obj in collection)
        { Console.WriteLine(obj); }
        Console.WriteLine();   }

    static void Main(string[] args)
    {
        Category c1 = new Category() { Id = 1, Name = "Tools", Tier = 2 };
        Category c2 = new Category() { Id = 2, Name = "Computers", Tier = 1 };
        Category c3 = new Category() { Id = 3, Name = "Eletronics", Tier = 1 };

        List<Product> products = new List<Product>()
        {
            new Product() { Id = 1, Name = "Computer", Price = 1100.0, Category = c2 },
            new Product() { Id = 2, Name = "Hammer", Price = 90.0, Category = c1 },
            new Product() { Id = 3, Name = "TV", Price = 1700.0, Category = c3 },
            new Product() { Id = 4, Name = "Notebook", Price = 1300.0, Category= c2 },
            new Product() { Id = 5, Name = "Saw", Price = 80.0, Category= c1  },
            new Product() { Id = 6, Name = "Tablet", Price = 700.0, Category = c2 },
            new Product() { Id = 7, Name = "Camera", Price = 700.0, Category = c3 },
            new Product() { Id = 8, Name = "Printer", Price = 350.0, Category = c3 },
            new Product() { Id = 9, Name = "MacBook", Price = 1800.0, Category = c2 },
            new Product() { Id = 10, Name = "Sound Bar", Price = 700.0, Category = c3 },
            new Product() { Id = 11, Name = "Level", Price = 70.0, Category = c1 }
        };

        var r1 = products.Where(p => p.Category.Tier == 1 && p.Price < 900.0);       // só isso...
        Print("TIER 1 AND PRICE < 900: ", r1);

        var r2 = products.Where(p => p.Category.Name == "Tools").Select(p => p.Name);
        Print("NAMES OF PRODUCTS FROM TOOLS", r2);

        var r3 = products.Where(p => p.Name[0] == 'C').Select(p => new { p.Name, p.Price, CategoryName = p.Category.Name });
        Print("NAMES STARTED WITH 'C' AND ANONYMOUS OBJECT", r3 );

        var r4 = products.Where(p => p.Category.Tier == 1).OrderBy(p => p.Price).ThenBy(p => p.Name);
        Print("TIER 1 ORDER BY PRICE THEN BY NAME ", r4);

        var r5 = r4.Skip(2).Take(4);
        Print("TIER 1 ORDER BY PRICE THEN BY NAME SKIP 2 TAKE 4", r5);

        var r6 = products.FirstOrDefault();
        Console.WriteLine("Fist or default test1: " + r6);
        var r7 = products.Where( p => p.Price > 3000.0).FirstOrDefault();
        Console.WriteLine("First or default test2: " + r7);
        Console.WriteLine();

        var r8 = products.Where(p => p.Id == 3).SingleOrDefault();          // pra pegar apenas 1 elemento ou nada, SingleOrDefault() não funciona se o resultado do where der mais de 1 resultado 
        Console.WriteLine("Single or default test1: " + r8 );
        var r9 = products.Where(p => p.Id == 30).SingleOrDefault();
        Console.WriteLine("Single or default test2: " + r9);

         var r10 = products.Max(p => p.Price);
        Console.WriteLine("\nMax price: " + r10);
        var r11 = products.Min(p => p.Price);
        Console.WriteLine("Min price: " + r11);
        var r12 = products.Where(p => p.Category.Id == 1).Sum(p => p.Price);
        Console.WriteLine("Category 1 Sum prices: " + r12);
        var r13 = products.Where(p => p.Category.Id == 1).Average(p => p.Price); // divisão por 0 não existe. se não tiver nada na fonte de dados, a média vai dar erro.
        Console.WriteLine("Category 1 Average prices: " + r13);
        var r14 = products.Where(p => p.Category.Id == 5).Select(p => p.Price).DefaultIfEmpty(0.0).Average();
        Console.WriteLine("Category 5 Average prices: " + r14) ;

        // operação personalizada Map Reduce
        var r15 = products.Where(p => p.Category.Id == 1).Select(p => p.Price).Aggregate(0.0, (x, y) => x + y);
        Console.WriteLine("Category 1 aggregate sum: " + r15);
        Console.WriteLine();

        // agrupamento
        var r16 = products.GroupBy(p => p.Category);
        foreach(IGrouping<Category, Product> group in r16)
        {
            Console.WriteLine("Category " + group.Key.Name + ": ");
            foreach(Product p in group)
            { Console.WriteLine(p); }
            Console.WriteLine();
        }
}

// DEMO: LINQ COM NOTAÇÃO SIMILAR AO SQL (usando os ex. da aula anterior)  24/08/2023

      //var r1 = products.Where(p => p.Category.Tier == 1 && p.Price < 900.0);       // só isso...
        var r1 = 
            from p in products
            where p.Category.Tier == 1 && p.Price < 900.0
            select p;
        Print("TIER 1 AND PRICE < 900: ", r1);

      //var r2 = products.Where(p => p.Category.Name == "Tools").Select(p => p.Name);
        var r2 =
            from p in products
            where p.Category.Name == "Tools"
            select p.Name;
        Print("NAMES OF PRODUCTS FROM TOOLS", r2);

      //var r3 = products.Where(p => p.Name[0] == 'C').Select(p => new { p.Name, p.Price, CategoryName = p.Category.Name });
        var r3 =
            from p in products
            where p.Name[0] == 'C'
            select new
            {
                p.Name,
                p.Price,
                CategoryName = p.Category.Name
            };
        Print("NAMES STARTED WITH 'C' AND ANONYMOUS OBJECT", r3);

        //var r4 = products.Where(p => p.Category.Tier == 1).OrderBy(p => p.Price).ThenBy(p => p.Name);
        var r4 =
            from p in products
            where p.Category.Tier == 1
            orderby p.Price, p.Name
            select p;
        Print("TIER 1 ORDER BY PRICE THEN BY NAME ", r4);

        var r5 = 
            (from p in r4
             select p).Skip(2).Take(4);
        Print("TIER 1 ORDER BY PRICE THEN BY NAME SKIP 2 TAKE 4", r5);


        //var r16 = products.GroupBy(p => p.Category);
        var r16 =
            from p in products
            group p by p.Category;
        foreach(IGrouping<Category, Product> group in r16)
        {
            Console.WriteLine("Category " + group.Key.Name + ": ");
            foreach(Product p in group)
            {
                Console.WriteLine(p);
            }
            Console.WriteLine();
        }
